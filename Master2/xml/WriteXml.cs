using Company.Master2.xmlmodel;
using Microsoft.master2.model;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;

namespace Microsoft.master2.xml
{
    class WriteXml
    {
        ArrayList classesList = new ArrayList();
        public WriteXml(ArrayList classesList)
        {
            this.classesList = classesList;
        }

        public void writeToFile(string fileName)
        {

            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            XmlWriter writer = XmlWriter.Create(fileName, settings);
            writer.WriteStartDocument();
            writer.WriteStartElement(Tags.MODEL);
            foreach (CSharpClass cSharpClass in classesList)
            {
                writer.WriteStartElement(Tags.CLASS);
                writer.WriteAttributeString("Name", cSharpClass.Name);
                writer.WriteElementString(Tags.PARENT, cSharpClass.Parent);

                writer.WriteStartElement(Tags.INTERFACES);
                ArrayList interfaces = cSharpClass.Interfaces;
                foreach (string interfaceName in interfaces)
                {
                    writer.WriteElementString(Tags.INTERFACE, interfaceName);
                }
                writer.WriteEndElement();//close tag Interfaces


                writer.WriteStartElement(Tags.METHODS);
                ArrayList methods = cSharpClass.Methods;
                foreach (CSharpMethod cSharpMethod in methods)
                {
                    writer.WriteStartElement(Tags.METHOD);
                    writer.WriteAttributeString("Name", cSharpMethod.Name);
                    ArrayList incomingCalls = cSharpMethod.IncomingCalls;
                    foreach (IncomingCall incomingCall in incomingCalls)
                    {
                        writer.WriteStartElement(Tags.INCOMING_METHOD);
                        writer.WriteAttributeString("class", incomingCall.ClassName);
                        writer.WriteAttributeString("incMethodName", incomingCall.Name);
                        writer.WriteEndElement();// close tag IncomingMethod
                    }

                    ArrayList oncomingCalls = cSharpMethod.OutgoingCalls;
                    foreach (MethodTypeCall oncomingCall in oncomingCalls)
                    {
                        writer.WriteStartElement(Tags.OUTGOING_METHOD);
                        writer.WriteAttributeString("class", oncomingCall.ClassName);
                        writer.WriteAttributeString("incMethodName", oncomingCall.Name);
                        writer.WriteEndElement();// close tag IncomingMethod
                    }
                    writer.WriteEndElement();//close tag Method
                }
                writer.WriteEndElement();//close tag Methods

                writer.WriteStartElement(Tags.FIELDS);// strat fields
                foreach (CSharpField cSharpField in cSharpClass.Fields)
                {
                    writer.WriteStartElement(Tags.FIELD); // strt elem field
                    writer.WriteAttributeString("name", cSharpField.Name);
                    writer.WriteEndElement();// close tag field

                }
                writer.WriteEndElement();//close tag fields

                writer.WriteEndElement();//close tag Class
            }
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
        }

        public void writeToFile2(string fileName)
        {

            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            XmlWriter writer = XmlWriter.Create(fileName, settings);
            writer.WriteStartDocument();
            //  writer.WriteComment("This file is generated by the program.");

            writer.WriteStartElement("Class");
            writer.WriteAttributeString("Name", "class name");
            writer.WriteElementString("Parent", "parent name");
            writer.WriteStartElement("Interfaces");
            writer.WriteElementString("Interface", "interface name1");
            writer.WriteElementString("Interface", "interface name2");
            writer.WriteElementString("Interface", "interface name3");
            writer.WriteEndElement();

            writer.WriteStartElement("Methods");
            writer.WriteStartElement("Method");
            writer.WriteAttributeString("Name", "method name");
            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "class name");
            writer.WriteAttributeString("incMethodName", "mthod  name");
            writer.WriteEndElement();

            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "class name2");
            writer.WriteAttributeString("incMethodName", "mthod  name2");
            writer.WriteEndElement();
            //end to Method
            writer.WriteEndElement();

            writer.WriteStartElement("Method");
            writer.WriteAttributeString("Name", "method name4");
            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "class name4");
            writer.WriteAttributeString("incMethodName", "mthod  name4");
            writer.WriteEndElement();

            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "class name24");
            writer.WriteAttributeString("incMethodName", "mthod  name42");
            writer.WriteEndElement();


            //end to Method
            writer.WriteEndElement();
            //end to Methods
            writer.WriteEndElement();

            writer.WriteStartElement("Class");
            writer.WriteAttributeString("Name", "firstClass");
            writer.WriteElementString("Parent", "parentOfTheFirstClass");
            writer.WriteStartElement("Interfaces");
            writer.WriteElementString("Interface", "interface1 forFirstClass");
            writer.WriteElementString("Interface", "interface  forFirstClass");
            writer.WriteElementString("Interface", "interface  forFirstClass");
            writer.WriteEndElement();

            writer.WriteStartElement("Methods");
            writer.WriteStartElement("Method");
            writer.WriteAttributeString("Name", "first methodName of the firstClass");
            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "first class with method to firstclass");
            writer.WriteAttributeString("incMethodName", "method to first class");
            writer.WriteEndElement();

            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "seconde class with method to first class");
            writer.WriteAttributeString("incMethodName", "method name for the first class emthod");
            writer.WriteEndElement();
            //end to Method
            writer.WriteEndElement();

            writer.WriteStartElement("Method");
            writer.WriteAttributeString("Name", "second method name");
            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "class name4");
            writer.WriteAttributeString("incMethodName", "mthod  name4");
            writer.WriteEndElement();

            writer.WriteStartElement("IncomingMethod");
            writer.WriteAttributeString("class", "class name24");
            writer.WriteAttributeString("incMethodName", "mthod  name42");
            writer.WriteEndElement();


            //end to Method
            writer.WriteEndElement();
            //end to Methods
            writer.WriteEndElement();
            writer.WriteEndDocument();
            writer.Flush();
            writer.Close();
        }


    }
}
